<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">

	<!--<include resource="org/springframework/boot/logging/logback/base.xml"/> -->

	<contextName>logback</contextName>
	<!-- logback中的配置文件，name的值是变量的名称。定义变量后，可以使“${}”来使用变量。 -->
	<!-- 从springboot的配置文件中获取值 -->
	<springProperty scope="context" name="logPath" source="logging.path"
		defaultValue="${LOG_PATH}/cat-producer/" />
	<springProperty scope="context" name="appName"
		source="spring.application.name" defaultValue="cat-producer" />
	<!-- 自定义变量 -->
	<property name="test" value="test-property" />
	<!-- 可以导入其他来源配置，并且可以使用其中的变量 -->
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<property name="include_test"
		value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}" />

	<!-- 控制台日志格式 -->
	<property name="CONSOLE_LOG_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger %file %line:%msg%n" />

	<!--输出到控制台 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>


	<!--输出到文件 -->
	<!-- 输出到文件的日志格式 -->
	<property name="FILE_LOG_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %file %line:%msg%n" />
	<appender name="FILEOUT"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${logPath}/${appName}/${appName}.log</file>
		<!--日志文件输出格式 -->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset> <!-- 设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志归档 -->
			<fileNamePattern>${logPath}/${appName}/${appName}.%d{yyyy-MM-dd}.log.%i
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
	</appender>


	<!-- root节点是必选节点，用来指定最基础的日志输出级别 -->
	<!-- 只有一个level属性 level:打印级别，大小写无关：OFF<TRACE<DEBUG<INFO<WARN<ERROR<ALL -->
	<!-- 默认是DEBUG 可以包含零个或多个元素 -->
	<root level="info">
		<appender-ref ref="STDOUT" />
	</root>
	<!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、 以及指定<appender> -->
	<!-- <logger>仅有一个name属性， 一个可选的level和一个可选的additivity属性 -->
	<!-- name:用来指定受此logger约束的某一个包或者具体的某一个类 -->
	<!-- level:设置级别 -->
	<!-- additivity:是否继承上级日志设置，默认为true,出现重复日志很有可能由于此配置项 -->
	<logger name="com.cjlogistics" level="DEBUG" />
	<!-- 数据库SQL start -->
	<!-- druid SQL打印 关闭了 connection、resultset的日志打印，具体可以查看DruidConfig中的配置 -->
	<logger name="druid.sql.DataSource" level="DEBUG" />
	<logger name="druid.sql.Connection" level="DEBUG" />
	<logger name="druid.sql.Statement" level="DEBUG" />
	<logger name="druid.sql.ResultSet" level="DEBUG" />
	<!-- 事务日志打印 -->
	<logger
		name="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		level="DEBUG" />
	<!-- 数据库SQL end -->

	<!-- dubbo start -->
	<logger name="org.apache.dubbo" level="info" />
	<!-- dubbo end -->
</configuration>